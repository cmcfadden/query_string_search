{"name":"Query string search","tagline":"Quick query-string-based filtering of data","body":"# Query String Search \r\n\r\nProvides an easy way to implement filtering in your API endpoints\r\n\r\n## Searches it supports\r\n\r\nSay you have a `movies` endpoint and people want to be able to filter down your huge collection of movie data. The API Search gem will give you the following filtering functionality:\r\n\r\n### Return all data\r\n\r\n`movies` will return every movie in the data set.\r\n\r\n### Return all data with non-null attribute value\r\n\r\n`movies?q=rating=all`\r\n\r\nReturns every movie with a non-nil rating.\r\n\r\n### Return all data with null attribute value\r\n\r\n`movies?q=rating=none`\r\n\r\nReturns every movie without ratings.\r\n\r\n### Return all data with an attribute value that matches\r\n\r\n`movies?q=year=1994`\r\n\r\nReturns every movie with a year of 1994\r\n\r\n### Return all data that matches one of many attributes\r\n\r\n`movies?q=year=1994|1995`\r\n\r\nReturns all movies with a year of 1994 or 1995\r\n\r\n### Return all data with values greater than or less than an attribute\r\n\r\n`movies?q=star_rating>1`\r\nReturns all movies with a star rating greater than one\r\n\r\n`movies?q=star_rating<3`\r\nReturns all movies with a star rating less than three\r\n\r\n`movies?q=star_rating>=2`\r\nReturns all movies with a star rating greater than or equal to 2\r\n\r\n`movies?q=star_rating<=4`\r\nReturns all movies with a star rating less than or equal to 4\r\n\r\n### Search an attribute that returns a collection\r\n\r\nIf your `movie` has a `home_formats` method that retuns an array like `[\"DVD\", \"BD\"]` you can filter that too.\r\n\r\n`movies?q=home_formats=DVD`\r\nReturns all movies whose `home_formats` includes \"DVD\"\r\n\r\nor\r\n\r\n`movies?q=home_formats=BD|DVD`\r\nReturns all movies whose `home_formats` includes \"DVD\" or \"BD\"\r\n\r\n### Combining Searches\r\n\r\nSearch criteria can be separated with commas\r\n\r\n`movie?q=year=1994,country=US,rated=none`\r\n\r\nRecords that match **all** the criteria will be returned. All un-rated movies made in the US in 1994.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'query_string_search'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\n## Usage\r\n\r\nFirst, create a collection of data. With ActiveRecord or other ORMs this is straightforward:\r\n\r\n```ruby\r\nMovie.all\r\n```\r\n\r\nOr something similar. As long as it returns a collection of objects, you should be good.\r\n\r\nThe objects must respond to the attributes you want to search on. Say you want to allow a search string like this:\r\n\r\n```\r\n`movies?q=year=1994`\r\n```\r\n\r\nThen every object in your data collection needs to respond to `year`.\r\n\r\nAgain, with ActiveRecord this is pretty straightforward. But if you're building your data source from raw SQL then you're going to have to convert that data into objects that respond to the attributes you want to search on.\r\n\r\nSecond, search! In Rails you can do something like this in a Controller method.\r\n\r\n```ruby\r\nQueryStringSearch.new(data, query_string).results\r\n```\r\n\r\nThis returns a collection of the objects that matched the search criteria.\r\n\r\nOr you can do it not in the controller. This will work:\r\n\r\n```ruby\r\ntest_query = \"country=us\"\r\nQueryStringSearch.new(Movie.all, test_query).results\r\n```\r\n\r\nYou get the idea. Pass in a data set and a query-stringish string and you'll get results back.\r\n\r\n\r\n## Contributing\r\n\r\n- Fork, branch, commit & pull.\r\n- Tests are required.\r\n- Don't go against our Rubocop style guidelines.\r\n\r\n## License\r\n\r\nÂ© Regents of the University of Minnesota. All rights reserved.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}